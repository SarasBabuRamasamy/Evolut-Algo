class ANN:
  def __init__(self, W, input1,N,test):
    self.W=W
    self.input1=input1
    self.N=N
    self.output=0
    self.test=test
#A class ANN is created, and its objects are initialized
  def testN(self,test):
    outputAll=[]
    sse=0
    for loop in range(self.N):
      self.output=self.ncalculation(self.input1,self.W,loop)
      outputAll.append(self.output)
      error=test[loop]-self.output
      sse=sse+(error*error)
    return sse, outputAll
#The function testN() is defined to append the calculated weights into the variable outputAll and the errors in variable sse      
  def ncalculation(self,in1,w,loop):
    net=w[0]+w[1]*in1[loop][0]+w[2]*in1[loop][1]
    if net >=0:
      self.output1=1
    else:
      self.output1=0
    return self.output1
#The function ncalculation() is defined using the McCulloch-Pitts Model 
  def getW(self):
    return self.W
  
  def setW(self,W):
    self.W=W
